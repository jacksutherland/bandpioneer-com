{% extends '_layout2023' %}

{% set fixedHeader = true %}
{% set isMobile = craft.app.request.isMobileBrowser(false) %}

{% set categories = craft.entries.section('topics') %}
{% if entry.tags.count %}
	{% set relatedPosts = craft.entries.section('blog').relatedTo(entry.tags).id('not ' ~ entry.id).limit(6).all() %}
	{% if relatedPosts | length < 6 %}
		{% set moreRelatedPosts = craft.entries.section('blog').relatedTo(entry.topic).id('not ' ~ entry.id).limit(6 - relatedPosts | length) %}
		{% set relatedPosts = relatedPosts | merge(moreRelatedPosts) %}
	{% endif %}
{% else %}
	{% set relatedPosts = craft.entries.section('blog').relatedTo(entry.topic).id('not ' ~ entry.id).limit(6).all() %}
{% endif %}

{% block headerScripts %}
	 {% if currentUser %}
		<meta name="csrf-token-name" content="{{ craft.app.config.general.csrfTokenName | e('html') }}">
		<meta name="csrf-token-value" content="{{ craft.app.request.csrfToken | e('html') }}">
	{% endif %}
{% endblock %}

{% block styles %}
	<link rel="stylesheet" href="{{ url('css/blogpost2023.min.css') }}?version={{ versionNumber }}" />
	{% if (not isMobile) and entry.blogImage.count %}
		<link rel="preload" as="image" href="{{ entry.blogImage.one().url('blogImage') }}" 
			imagesrcset="{{ entry.blogImage.one().url('blogImage') }} 1x, {{ entry.blogImage.one().url('blogImage2x') }} 2x">
	{% endif %}
{% endblock %}

{% block scripts %}
	<script defer>
        document.addEventListener("DOMContentLoaded", function()
        {
            if (typeof(bp) !== undefined)
            {
            	bp.createBlogPost();

            	var rdata = [];

            	{% if currentUser and entry.enableRanking %}
	            	{% set rankingData = craft.rockstar.getCurrentUserKeys(entry.id) %}
	            	{% for rd in rankingData %}
	            		rdata.push({ key: '{{rd.key}}', value: '{{rd.value}}', liked: '{{rd.liked}}', sort: '{{rd.sort}}' });
	            	{% endfor %}
	            	// bp.createBlogRanker("{{ entry.id }}", rdata);
	            	createBlogRanker("{{ entry.id }}", rdata);
	            {% endif %}
            }    
        });
        function createBlogRanker(eid, rankingData)
        {
        	var likeUrl = '/rockstar/ranking-like-it';
			let formData = new FormData();
			var likesAndDislikes = document.querySelectorAll('.ranker-like, .ranker-dislike');

			// Set like buttons selected

			rankingData.forEach(function(rdata)
			{
				var rform = document.querySelector(`[data-ranker="${rdata.key}"]`);

				if(rdata.liked === '1')
				{
					rform.querySelector('.ranker-like').classList.add('selected');
				}
				else if(rdata.liked === '0')
				{
					rform.querySelector('.ranker-dislike').classList.add('selected');
				}
			});

			// add events to like buttons
			
			likesAndDislikes.forEach(function(btn)
			{
				btn.addEventListener('click', function(e)
				{
					e.preventDefault();

					this.classList.toggle('selected');

					var selected = this.classList.contains('selected');
					var parentContainer = this.closest('.ranker-buttons');
	        		var keyInput = parentContainer.querySelector('[name="key"]');
	        		var likedInput = parentContainer.querySelector('[name="liked"]');
	        		var likedValue = 'unselected';

			        if (likedInput)
			        {
			            if (btn.classList.contains('ranker-like'))
				        {
				        	parentContainer.querySelector('.ranker-dislike').classList.remove('selected');
				            likedValue = selected ? 'liked' : 'unselected';
				        }
				        else if (btn.classList.contains('ranker-dislike'))
				        {
				        	parentContainer.querySelector('.ranker-like').classList.remove('selected');
				            likedValue = selected ? 'disliked' : 'unselected';
				        }

				        likedInput.value = likedValue;
				        
						let csrfTokenName = document.querySelector('meta[name="csrf-token-name"]').getAttribute('content');
						let csrfTokenValue = document.querySelector('meta[name="csrf-token-value"]').getAttribute('content');

				        formData.append('eid', eid);
				        formData.append('key', keyInput.value);
						formData.append('liked', likedValue);
						formData.append(csrfTokenName, csrfTokenValue);

				        fetch(likeUrl, { method: 'POST', body: formData })
						.then((response) => {
						    if (response.ok)
						    {
						    	return response.text();
						    }
						}).then((response) => {
						}).catch((error) => {
						    console.error("Error:", error);
						});
			        }
				});
			});

			document.querySelector('.scroll-up').addEventListener('click', function(e)
			{
				e.preventDefault();

				const scrollContainer = document.querySelector('.ranker-modal .scroll-container');
			    const scrollAmount = -(scrollContainer.clientHeight * 0.25);

			    if(scrollContainer.scrollTop > 0)
			    {
			    	console.log('scrolling up: ' + scrollAmount);

				    scrollContainer.scrollBy({
				      top: scrollAmount,
				      behavior: 'smooth'
				    });
				}
			});
			document.querySelector('.scroll-down').addEventListener('click', function(e)
			{
				e.preventDefault();

				const scrollContainer = document.querySelector('.ranker-modal .scroll-container');
			    const scrollAmount = scrollContainer.clientHeight * 0.25;

			    if(scrollContainer.scrollHeight - scrollContainer.scrollTop > scrollContainer.clientHeight)
			    {
			    	console.log('scrolling down: ' + scrollAmount);

				    scrollContainer.scrollBy({
				      top: scrollAmount,
				      behavior: 'smooth'
				    });
				}
			});

			// Create sortable rank list

			const modal = document.querySelector('.ranker-modal .modal');
			const ul = modal.querySelector('ul');
			let draggedItem = null;
			let placeholder = document.createElement('li');
			placeholder.className = 'placeholder';

			// Order rank list by sort from DB
			const liItems = Array.from(ul.querySelectorAll('li'));
			const sortOrder = {};
			rankingData.forEach(item => sortOrder[item.key] = item.sort);

			// Sort and append items based on sortOrder
			liItems.sort((a, b) => sortOrder[a.getAttribute('data-key')] - sortOrder[b.getAttribute('data-key')])
			       .forEach(item => ul.appendChild(item));

			// Event handlers
			function handleDragStart(e) {
			    draggedItem = e.target;
			    draggedItem.classList.add('dragging');
			    setTimeout(() => ul.insertBefore(placeholder, draggedItem.nextSibling), 0);
			}

			function handleDragEnd() {
			    draggedItem.classList.remove('dragging');
			    ul.insertBefore(draggedItem, placeholder);
			    ul.removeChild(placeholder);
			    draggedItem = null;
			}

			function handleDragOver(e) {
			    e.preventDefault();
			    const afterElement = getDragAfterElement(ul, e.clientY);
			    ul.insertBefore(placeholder, afterElement || null);
			}

			function handleTouchStart(e) {
			    e.preventDefault();
			    draggedItem = e.target;
			    draggedItem.classList.add('mobile-dragging');
			    const scrollContainer = ul.parentElement;
			    const draggedRect = draggedItem.getBoundingClientRect();
			    draggedItem.draggedOffsetY = e.touches[0].clientY - draggedRect.top;
			    draggedItem.style.top = `${e.touches[0].clientY - draggedItem.draggedOffsetY - scrollContainer.scrollTop}px`;
			    setTimeout(() => ul.insertBefore(placeholder, draggedItem.nextSibling), 0);
			}

			function handleTouchMove(e) {
			    if (!draggedItem) return;
			    const touch = e.touches[0];
			    const scrollContainer = ul.parentElement;
			    const clientY = touch.clientY;
			    draggedItem.style.top = `${clientY - draggedItem.draggedOffsetY - scrollContainer.scrollTop}px`;
			    const afterElement = getDragAfterElement(ul, touch.clientY);

			    console.log(afterElement.innerText);

			    ul.insertBefore(placeholder, afterElement || null);
			}

			function handleTouchEnd() {
			    draggedItem.classList.remove('mobile-dragging');
			    ul.insertBefore(draggedItem, placeholder);
			    ul.removeChild(placeholder);
			    draggedItem = null;
			}

			// Attach event listeners
			ul.querySelectorAll('li').forEach(item => {
			    item.draggable = true;
			    item.addEventListener('dragstart', handleDragStart);
			    item.addEventListener('dragend', handleDragEnd);
			    item.addEventListener('touchstart', handleTouchStart);
			    item.addEventListener('touchmove', handleTouchMove);
			    item.addEventListener('touchend', handleTouchEnd);
			});
			ul.addEventListener('dragover', handleDragOver);
			ul.addEventListener('touchmove', handleTouchMove);

			function getDragAfterElement(container, y) {
			    const draggableElements = [...container.querySelectorAll('li:not(.mobile-dragging):not(.dragging):not(.placeholder)')];
			    return draggableElements.reduce((closest, child) => {
			        const box = child.getBoundingClientRect();
			        const offset = y - box.top - box.height / 2;
			        return offset < 0 && offset > closest.offset ? { offset, element: child } : closest;
			    }, { offset: Number.NEGATIVE_INFINITY }).element;
			}
        }
    </script>
{% endblock %}


{% block header %}

	{% set blogHeadCacheKey = "blog-post-" ~ entry.slug ~ "-" ~ (isMobile ? 'mobile' : 'desktop') %}
	{% cache using key blogHeadCacheKey %}
		<div id="reading-time" class="reading-time"><div class="reading-progress"></div></div>
		<section class="blog-header">

			<div class="container narrow-container">
				<h1>{{ entry.title }}</h1>
				{% if entry.topic.count %}
					<nav aria-label="breadcrumbs" class="breadcrumb">
						<a href="{{ siteUrl }}"><span>Home</span></a>
						<a href="{{ entry.topic.one().url }}"><span>{{ entry.topic.one().title }}</span></a>
					</nav>
				{% endif %}
				{% if entry.subheadline | length %}
					<h2>{{ entry.subheadline }}</h2>
				{% endif %}
				{% include '_includes/author' with { blog: entry, showImage: (not isMobile) } %}

				{# removing img above the fold on mobile, to prevent long LCP #}
				{% if (not isMobile) and entry.blogImage.count %}
					{# <div class="sharethis-inline-share-buttons"></div> #}
					{% include 'blog/_includes/img' with { img: entry.blogImage.one(), isFeatured: true } %}
				{% endif %}
			</div>

			{% if entry.featuredSnippet | length %}
				<div class="container narrow-container">
					<div class="featured-snippet">
						{{ entry.featuredSnippet }}
					</div>
				</div>
			{% endif %}
		</section>
	{% endcache %}

{% endblock %}


{% block content %}

	{% if entry.enableRanking %}
		{% include 'blog/_includes/blog-module' %}
	{% else %}
		{% cache %}
			{% include 'blog/_includes/blog-module' %}
		{% endcache %}
	{% endif %}
	
	<div class="blog-comments">
		<div class="container narrow-container">
			{% if entry.headline | length %}
				<h4>{{ entry.headline }}</h4>
			{% endif %}
			<h2>Leave a Reply!</h2>
			{{ craft.comments.render(entry.id) }}
		</div>
	</div>

	{% cache %}
		<div class="container narrow-container">
			<h3 class="section-title"><span>Keep Reading!</span></h3>
			<section class="blog-row related-content">
				{% for blog in relatedPosts %}
					<article>
						{% if blog.blogImage.count %}
							{% set img = blog.blogImage.one() %}
							{% set cat = blog.topic.one() %}
							<a class="blog-img" href="{{ blog.url }}">
			        			<picture>
								 	<source srcset="{{ img.url("blogRelatedContent") }}, {{ img.url('blogRelatedContent2x') }} 2x" media="(min-width: 768px)" />
									<img src="{{ img.url('recentPostsMobile2023') }}"
										srcset="{{ img.url('recentPostsMobile20232x') }} 2x"
									 	alt="{{ img.title }}"
									 	loading="lazy"
										width="{{ img.width('recentPostsMobile2023') }}" height="{{ img.height('recentPostsMobile2023') }}">
								</picture>
							</a>
							<a class="category" href="{{ cat.url }}">
								{% include '_includes/icons' with { type: 'tag' } %}
								<span>{{ cat.ctaText }}</span>
							</a>
							<a class="blog-title" href="{{ blog.url }}">
								<h4 class="related-title">{{ blog.title }}</h4>
							</a>
						{% endif %}
	        		</article>
				{% endfor %}
			</section>
			{% include '_includes/related-categories' with { categories: entry.topic } %}
		</div>
	{% endcache %}

	{% if currentUser and entry.enableRanking %}
		<div class="overlay ranker-modal">
			<div class="modal" style="max-width: 600px;">
				<a class="close-icon-button" href="/">{% include '_includes/icons' with { type: 'close' } %}</a>
				<aside>
					<a class="scroll-up" href="/">{% include '_includes/icons' with { type: 'down' } %}</a>
					<a class="scroll-down" href="/">{% include '_includes/icons' with { type: 'down' } %}</a>
				</aside>
				<div>
					{% if entry.ctaText %}
						<h3>{{ entry.ctaText }}</h3>
					{% else %}
						<h3>Reorder this list</h3>
					{% endif %}
					<div class="scroll-container">
						<ul>
							{% for module in entry.blogContent.all() %}
								{% switch module.type %}
									{% case "sectionTitle" %}
									{% case "imageText" %}
										{% if module.rankerKey | length %}
											<li draggable="true" data-key="{{ module.rankerKey }}">{{ module.rankerValue }}</li>
										{% endif %}
								{% endswitch %}
							{% endfor %}
						</ul>
					</div>
				</div>
			</div>
		</div>
	{% endif %}

{% endblock %}