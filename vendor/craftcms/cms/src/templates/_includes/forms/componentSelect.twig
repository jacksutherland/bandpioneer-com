{% import '_includes/forms.twig' as forms %}

{% if name ?? false %}
  {{ hiddenInput(name|replace('/\\[\\]$/', ''), '') }}
{% endif -%}

{% set id = id ?? "componentselect#{random()}" -%}
{% set values = values ?? (value ?? false ? [value] : []) -%}
{% set limit = limit ?? null %}
{% set sortable = (not limit or limit > 1) and (sortable ?? true) %}
{% set createAction = createAction ?? null %}
{% set disabled = (disabled ?? false) ? true : false %}
{% set registerJs = registerJs ?? true %}

{% set containerAttributes = {
  id: id,
  class: ['componentselect']|merge((class ?? [])|explodeClass),
}|merge(containerAttributes ?? [], recursive=true) %}

{% set modalSettings = {
  modalTitle: selectionLabel ?? 'Choose'|t('app'),
}|merge(modalSettings ?? [], recursive=true) %}

{%- if block('attr') is defined %}
  {%- set containerAttributes = containerAttributes|merge(('<div ' ~ block('attr') ~ '>')|parseAttr, recursive=true) %}
{% endif %}

{% tag 'div' with containerAttributes %}
  {% tag 'ul' with {
    class: [
      'components',
      'chips',
      (inline ?? false) ? 'inline-chips' : null,
    ]|filter,
  } %}
    {%- apply spaceless %}
      {% for component in values %}
        <li>
          {% set chip = chip(component, {
            inputName: inputName ?? name ?? null,
            checkbox: selectable ?? false,
            showActionMenu: true,
          }) %}
          {% if disabled %}
            {% set chip = chip|removeClass('removable') %}
          {% endif %}
          {{ chip|raw }}
        </li>
      {% endfor %}
    {% endapply -%}
  {% endtag %}

  <div class="flex flex-nowrap">
    {% set valueIds = values|map(component => component.getId()) %}

    {{ disclosureMenu(options|sort((a, b) => a.getUiLabel() <=> b.getUiLabel())|map(component => {
      type: 'button',
      label: component.getUiLabel(),
      icon: component is instance of('craft\\base\\Iconic') ? component.getIcon() : null,
      color: component is instance of('craft\\base\\Colorable') ? component.getColor() : null,
      attributes: {
        data: {
          type: className(component),
          id: component.getId(),
        },
      },
      liAttributes: {
        class: {
          hidden: component.getId() in valueIds
        }|filter|keys,
      },
    }), {
      buttonLabel: 'Choose'|t('app'),
      buttonAttributes: {
        class: ['dashed', 'add-btn'],
      },
      omitIfEmpty: false,
    }) }}

    {% if createAction %}
      {{ forms.button({
        class: ['add', 'icon', 'dashed', 'create-btn'],
        label: 'Create'|t('app'),
        icon: 'plus',
      }) }}
    {% endif %}
  </div>
{% endtag %}

{% if not disabled and registerJs %}
  {% set jsSettings = {
    id: id|namespaceInputId,
    name: name|namespaceInputName,
    limit: limit,
    sortable: sortable,
    createAction: createAction,
  } %}

  {% js %}
    new Craft.ComponentSelectInput({{ jsSettings|json_encode|raw }});
  {% endjs %}
{% endif %}
