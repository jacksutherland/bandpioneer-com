{"version":3,"file":"435.js","mappings":"0IAGA,eAAsB,mBAAmBA,IACrC,MAAMC,GAAS,QAAa,CACxBC,cAAeC,GAAUA,EAAOC,WAChCC,SAAUC,EACVC,WAAYC,EACZC,aAAc,CAAEC,QAASV,EAAOU,WAEpC,MAAO,CACHV,SACAW,WAAYV,EAAOU,WACnBC,MAAOX,EAAOW,MACdC,OAAM,IACNC,cAAe,YACfC,KAAM,QACNC,cAAe,CACXC,MAAO,SACPC,QAAS,QAEhB,IAEL,MAAMZ,EAAW,CACba,YAAa,kBACbC,OAAQ,4DACRC,OAAQ,0DACRC,QAAS,oBAEPd,EAAa,CACfe,SAAU,EAAC,IAAAC,GAAE,MAAM,QAAK,SAAS,IAAAA,GAAE,OAAO,IAAAA,GAAE,MAC5CC,MAAO,EAAC,IAAAC,GAAE,SAAU,QAAQ,IAAAF,GAAE,KAAM,SACpC,KAAAG,CAAMf,GACF,OAAQA,EAAMgB,MACV,IAAK,SACD,MAAO,cACX,IAAK,SACD,MAAO,cACX,IAAK,cACD,OAAQhB,EAAMiB,OACV,IAAK,IACD,MAAO,YACX,IAAK,IACD,MAAO,cAEf,OAAO,KACX,IAAK,UACD,OAAQjB,EAAMiB,OACV,IAAK,OACL,IAAK,QACD,MAAO,eACX,IAAK,OACD,MAAO,YAEf,OAAO,KAEnB,EACAC,YAAa,EAAC,IAAAJ,GAAE,SAAU,WAC1BK,YAAa,EAAC,IAAAL,GAAE,SAAU,WAC1BM,aAAc,EAAC,IAAAN,GAAE,UAAW,YAC5BO,UAAW,EAAC,IAAAP,GAAE,UAAW,YACzBQ,UAAW,EAAC,IAAAV,GAAE,MAAM,QAAK,SAAS,IAAAA,GAAE,OAAO,IAAAA,GAAE,MAC7CW,YAAa,EAAC,IAAAX,GAAE,MAAM,QAAK,eAAe,IAAAA,GAAE,OAAO,IAAAA,GAAE,MACrDY,YAAa,EAAC,IAAAV,GAAE,SAAU,aAAa,IAAAF,GAAE,KAAM,S,uBC/DpC,SAASX,EAAOwB,EAAOC,GAClC,IAAIC,EAAIC,EACR,MAAM,OAAEC,EAAM,YAAEC,GAAgBL,EAIhC,QAHeI,GAA4B,IAAlBA,EAAOE,OAE1BF,EAAOG,IAAI,KAAqC,QAA7BL,EAAKM,KAAK/B,qBAAkC,IAAPyB,OAAgB,EAASA,EAAGO,KAAKR,IAAc,EAAI,GAD3GI,IAEW,KAA8B,QAAtBF,EAAKK,KAAK7C,cAA2B,IAAPwC,OAAgB,EAASA,EAAGO,aAAe,EACtG,C","sources":["webpack:///../../../../../node_modules/codemirror-graphql/esm/results/mode.js","webpack:///../../../../../node_modules/codemirror-graphql/esm/utils/mode-indent.js"],"sourcesContent":["import CodeMirror from 'codemirror';\nimport { list, t, onlineParser, p } from 'graphql-language-service';\nimport indent from '../utils/mode-indent';\nCodeMirror.defineMode('graphql-results', config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatSpace(),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nconst LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nconst ParseRules = {\n    Document: [p('{'), list('Entry', p(',')), p('}')],\n    Entry: [t('String', 'def'), p(':'), 'Value'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [t('String', 'string')],\n    BooleanValue: [t('Keyword', 'builtin')],\n    NullValue: [t('Keyword', 'keyword')],\n    ListValue: [p('['), list('Value', p(',')), p(']')],\n    ObjectValue: [p('{'), list('ObjectField', p(',')), p('}')],\n    ObjectField: [t('String', 'property'), p(':'), 'Value'],\n};\n//# sourceMappingURL=mode.js.map","export default function indent(state, textAfter) {\n    var _a, _b;\n    const { levels, indentLevel } = state;\n    const level = !levels || levels.length === 0\n        ? indentLevel\n        : levels.at(-1) - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n//# sourceMappingURL=mode-indent.js.map"],"names":["config","parser","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","indent","electricInput","fold","closeBrackets","pairs","explode","Punctuation","Number","String","Keyword","Document","p","Entry","t","Value","kind","value","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField","state","textAfter","_a","_b","levels","indentLevel","length","at","this","test","indentUnit"],"sourceRoot":""}