{"version":3,"file":"123.js","mappings":"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","sources":["webpack:///../../../../../node_modules/codemirror-graphql/esm/utils/hintList.js","webpack:///../../../../../node_modules/codemirror-graphql/esm/variables/hint.js","webpack:///../../../../../node_modules/codemirror-graphql/esm/utils/forEachState.js"],"sourcesContent":["export default function hintList(cursor, token, list) {\n    const hints = filterAndSortList(list, normalizeText(token.string));\n    if (!hints) {\n        return;\n    }\n    const tokenStart = token.type !== null && /\"|\\w/.test(token.string[0])\n        ? token.start\n        : token.end;\n    return {\n        list: hints,\n        from: { line: cursor.line, ch: tokenStart },\n        to: { line: cursor.line, ch: token.end },\n    };\n}\nfunction filterAndSortList(list, text) {\n    if (!text) {\n        return filterNonEmpty(list, entry => !entry.isDeprecated);\n    }\n    const byProximity = list.map(entry => ({\n        proximity: getProximity(normalizeText(entry.text), text),\n        entry,\n    }));\n    const conciseMatches = filterNonEmpty(filterNonEmpty(byProximity, pair => pair.proximity <= 2), pair => !pair.entry.isDeprecated);\n    const sortedMatches = conciseMatches.sort((a, b) => (a.entry.isDeprecated ? 1 : 0) - (b.entry.isDeprecated ? 1 : 0) ||\n        a.proximity - b.proximity ||\n        a.entry.text.length - b.entry.text.length);\n    return sortedMatches.map(pair => pair.entry);\n}\nfunction filterNonEmpty(array, predicate) {\n    const filtered = array.filter(predicate);\n    return filtered.length === 0 ? array : filtered;\n}\nfunction normalizeText(text) {\n    return text.toLowerCase().replaceAll(/\\W/g, '');\n}\nfunction getProximity(suggestion, text) {\n    let proximity = lexicalDistance(text, suggestion);\n    if (suggestion.length > text.length) {\n        proximity -= suggestion.length - text.length - 1;\n        proximity += suggestion.indexOf(text) === 0 ? 0 : 0.5;\n    }\n    return proximity;\n}\nfunction lexicalDistance(a, b) {\n    let i;\n    let j;\n    const d = [];\n    const aLength = a.length;\n    const bLength = b.length;\n    for (i = 0; i <= aLength; i++) {\n        d[i] = [i];\n    }\n    for (j = 1; j <= bLength; j++) {\n        d[0][j] = j;\n    }\n    for (i = 1; i <= aLength; i++) {\n        for (j = 1; j <= bLength; j++) {\n            const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n            d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n            if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n                d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n            }\n        }\n    }\n    return d[aLength][bLength];\n}\n//# sourceMappingURL=hintList.js.map","import CodeMirror from 'codemirror';\nimport { getNullableType, getNamedType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLBoolean, } from 'graphql';\nimport forEachState from '../utils/forEachState';\nimport hintList from '../utils/hintList';\nCodeMirror.registerHelper('hint', 'graphql-variables', (editor, options) => {\n    const cur = editor.getCursor();\n    const token = editor.getTokenAt(cur);\n    const results = getVariablesHint(cur, token, options);\n    if ((results === null || results === void 0 ? void 0 : results.list) && results.list.length > 0) {\n        results.from = CodeMirror.Pos(results.from.line, results.from.ch);\n        results.to = CodeMirror.Pos(results.to.line, results.to.ch);\n        CodeMirror.signal(editor, 'hasCompletion', editor, results, token);\n    }\n    return results;\n});\nfunction getVariablesHint(cur, token, options) {\n    const state = token.state.kind === 'Invalid' ? token.state.prevState : token.state;\n    const { kind, step } = state;\n    if (kind === 'Document' && step === 0) {\n        return hintList(cur, token, [{ text: '{' }]);\n    }\n    const { variableToType } = options;\n    if (!variableToType) {\n        return;\n    }\n    const typeInfo = getTypeInfo(variableToType, token.state);\n    if (kind === 'Document' || (kind === 'Variable' && step === 0)) {\n        const variableNames = Object.keys(variableToType);\n        return hintList(cur, token, variableNames.map(name => ({\n            text: `\"${name}\": `,\n            type: variableToType[name],\n        })));\n    }\n    if ((kind === 'ObjectValue' || (kind === 'ObjectField' && step === 0)) &&\n        typeInfo.fields) {\n        const inputFields = Object.keys(typeInfo.fields).map(fieldName => typeInfo.fields[fieldName]);\n        return hintList(cur, token, inputFields.map(field => ({\n            text: `\"${field.name}\": `,\n            type: field.type,\n            description: field.description,\n        })));\n    }\n    if (kind === 'StringValue' ||\n        kind === 'NumberValue' ||\n        kind === 'BooleanValue' ||\n        kind === 'NullValue' ||\n        (kind === 'ListValue' && step === 1) ||\n        (kind === 'ObjectField' && step === 2) ||\n        (kind === 'Variable' && step === 2)) {\n        const namedInputType = typeInfo.type\n            ? getNamedType(typeInfo.type)\n            : undefined;\n        if (namedInputType instanceof GraphQLInputObjectType) {\n            return hintList(cur, token, [{ text: '{' }]);\n        }\n        if (namedInputType instanceof GraphQLEnumType) {\n            const values = namedInputType.getValues();\n            return hintList(cur, token, values.map(value => ({\n                text: `\"${value.name}\"`,\n                type: namedInputType,\n                description: value.description,\n            })));\n        }\n        if (namedInputType === GraphQLBoolean) {\n            return hintList(cur, token, [\n                { text: 'true', type: GraphQLBoolean, description: 'Not false.' },\n                { text: 'false', type: GraphQLBoolean, description: 'Not true.' },\n            ]);\n        }\n    }\n}\nfunction getTypeInfo(variableToType, tokenState) {\n    const info = {\n        type: null,\n        fields: null,\n    };\n    forEachState(tokenState, state => {\n        switch (state.kind) {\n            case 'Variable': {\n                info.type = variableToType[state.name];\n                break;\n            }\n            case 'ListValue': {\n                const nullableType = info.type ? getNullableType(info.type) : undefined;\n                info.type =\n                    nullableType instanceof GraphQLList ? nullableType.ofType : null;\n                break;\n            }\n            case 'ObjectValue': {\n                const objectType = info.type ? getNamedType(info.type) : undefined;\n                info.fields =\n                    objectType instanceof GraphQLInputObjectType\n                        ? objectType.getFields()\n                        : null;\n                break;\n            }\n            case 'ObjectField': {\n                const objectField = state.name && info.fields ? info.fields[state.name] : null;\n                info.type = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n                break;\n            }\n        }\n    });\n    return info;\n}\n//# sourceMappingURL=hint.js.map","export default function forEachState(stack, fn) {\n    const reverseStateStack = [];\n    let state = stack;\n    while (state === null || state === void 0 ? void 0 : state.kind) {\n        reverseStateStack.push(state);\n        state = state.prevState;\n    }\n    for (let i = reverseStateStack.length - 1; i >= 0; i--) {\n        fn(reverseStateStack[i]);\n    }\n}\n//# sourceMappingURL=forEachState.js.map"],"names":["hintList","cursor","token","list","hints","text","filterNonEmpty","entry","isDeprecated","map","proximity","getProximity","normalizeText","pair","sort","a","b","length","filterAndSortList","string","tokenStart","type","test","start","end","from","line","ch","to","array","predicate","filtered","filter","toLowerCase","replaceAll","suggestion","i","j","d","aLength","bLength","cost","Math","min","lexicalDistance","indexOf","editor","options","cur","getCursor","getTokenAt","results","state","kind","prevState","step","variableToType","typeInfo","tokenState","info","fields","forEachState","name","nullableType","undefined","ofType","objectType","getFields","objectField","getTypeInfo","Object","keys","fieldName","field","description","namedInputType","getValues","value","getVariablesHint","stack","fn","reverseStateStack","push"],"sourceRoot":""}