{"version":3,"file":"391.js","mappings":"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","sources":["webpack:///../../../../../node_modules/graphql-ws/dist/common-CGW11Fyb.js","webpack:///../../../../../node_modules/graphql-ws/dist/client.js"],"sourcesContent":["function extendedTypeof(val) {\n  if (val === null) {\n    return \"null\";\n  }\n  if (Array.isArray(val)) {\n    return \"array\";\n  }\n  return typeof val;\n}\nfunction isObject(val) {\n  return extendedTypeof(val) === \"object\";\n}\nfunction isAsyncIterable(val) {\n  return typeof Object(val)[Symbol.asyncIterator] === \"function\";\n}\nfunction isAsyncGenerator(val) {\n  return isObject(val) && typeof Object(val)[Symbol.asyncIterator] === \"function\" && typeof val.return === \"function\";\n}\nfunction areGraphQLFormattedErrors(obj) {\n  return Array.isArray(obj) && // must be at least one error\n  obj.length > 0 && // error has at least a message\n  obj.every((ob) => \"message\" in ob);\n}\nfunction limitCloseReason(reason, whenTooLong) {\n  return reason.length < 124 ? reason : whenTooLong;\n}\n\nconst GRAPHQL_TRANSPORT_WS_PROTOCOL = \"graphql-transport-ws\";\nconst DEPRECATED_GRAPHQL_WS_PROTOCOL = \"graphql-ws\";\nvar CloseCode = /* @__PURE__ */ ((CloseCode2) => {\n  CloseCode2[CloseCode2[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n  CloseCode2[CloseCode2[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n  CloseCode2[CloseCode2[\"BadRequest\"] = 4400] = \"BadRequest\";\n  CloseCode2[CloseCode2[\"BadResponse\"] = 4004] = \"BadResponse\";\n  CloseCode2[CloseCode2[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n  CloseCode2[CloseCode2[\"Forbidden\"] = 4403] = \"Forbidden\";\n  CloseCode2[CloseCode2[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n  CloseCode2[CloseCode2[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n  CloseCode2[CloseCode2[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n  CloseCode2[CloseCode2[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n  CloseCode2[CloseCode2[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n  return CloseCode2;\n})(CloseCode || {});\nvar MessageType = /* @__PURE__ */ ((MessageType2) => {\n  MessageType2[\"ConnectionInit\"] = \"connection_init\";\n  MessageType2[\"ConnectionAck\"] = \"connection_ack\";\n  MessageType2[\"Ping\"] = \"ping\";\n  MessageType2[\"Pong\"] = \"pong\";\n  MessageType2[\"Subscribe\"] = \"subscribe\";\n  MessageType2[\"Next\"] = \"next\";\n  MessageType2[\"Error\"] = \"error\";\n  MessageType2[\"Complete\"] = \"complete\";\n  return MessageType2;\n})(MessageType || {});\nfunction validateMessage(val) {\n  if (!isObject(val)) {\n    throw new Error(\n      `Message is expected to be an object, but got ${extendedTypeof(val)}`\n    );\n  }\n  if (!val.type) {\n    throw new Error(`Message is missing the 'type' property`);\n  }\n  if (typeof val.type !== \"string\") {\n    throw new Error(\n      `Message is expects the 'type' property to be a string, but got ${extendedTypeof(\n        val.type\n      )}`\n    );\n  }\n  switch (val.type) {\n    case \"connection_init\" /* ConnectionInit */:\n    case \"connection_ack\" /* ConnectionAck */:\n    case \"ping\" /* Ping */:\n    case \"pong\" /* Pong */: {\n      if (val.payload != null && !isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`\n        );\n      }\n      break;\n    }\n    case \"subscribe\" /* Subscribe */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(\n            val.payload\n          )}`\n        );\n      }\n      if (typeof val.payload.query !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(\n            val.payload.query\n          )}`\n        );\n      }\n      if (val.payload.variables != null && !isObject(val.payload.variables)) {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(\n            val.payload.variables\n          )}`\n        );\n      }\n      if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(\n            val.payload.operationName\n          )}`\n        );\n      }\n      if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n        throw new Error(\n          `\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(\n            val.payload.extensions\n          )}`\n        );\n      }\n      break;\n    }\n    case \"next\" /* Next */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!isObject(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(\n            val.payload\n          )}`\n        );\n      }\n      break;\n    }\n    case \"error\" /* Error */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      if (!areGraphQLFormattedErrors(val.payload)) {\n        throw new Error(\n          `\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(\n            val.payload\n          )}`\n        );\n      }\n      break;\n    }\n    case \"complete\" /* Complete */: {\n      if (typeof val.id !== \"string\") {\n        throw new Error(\n          `\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(\n            val.id\n          )}`\n        );\n      }\n      if (!val.id) {\n        throw new Error(\n          `\"${val.type}\" message requires a non-empty 'id' property`\n        );\n      }\n      break;\n    }\n    default:\n      throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n  }\n  return val;\n}\nfunction parseMessage(data, reviver) {\n  return validateMessage(\n    typeof data === \"string\" ? JSON.parse(data, reviver) : data\n  );\n}\nfunction stringifyMessage(msg, replacer) {\n  validateMessage(msg);\n  return JSON.stringify(msg, replacer);\n}\n\nexport { CloseCode as C, DEPRECATED_GRAPHQL_WS_PROTOCOL as D, GRAPHQL_TRANSPORT_WS_PROTOCOL as G, MessageType as M, isAsyncGenerator as a, isAsyncIterable as b, isObject as i, limitCloseReason as l, parseMessage as p, stringifyMessage as s, validateMessage as v };\n","import { G as GRAPHQL_TRANSPORT_WS_PROTOCOL, s as stringifyMessage, M as MessageType, C as CloseCode, l as limitCloseReason, p as parseMessage, i as isObject } from './common-CGW11Fyb.js';\nexport { D as DEPRECATED_GRAPHQL_WS_PROTOCOL, v as validateMessage } from './common-CGW11Fyb.js';\n\nfunction createClient(options) {\n  const {\n    url,\n    connectionParams,\n    lazy = true,\n    onNonLazyError = console.error,\n    lazyCloseTimeout: lazyCloseTimeoutMs = 0,\n    keepAlive = 0,\n    disablePong,\n    connectionAckWaitTimeout = 0,\n    retryAttempts = 5,\n    retryWait = async function randomisedExponentialBackoff(retries2) {\n      const retryDelaySeconds = Math.pow(2, retries2);\n      await new Promise(\n        (resolve) => setTimeout(\n          resolve,\n          retryDelaySeconds * 1e3 + // add random timeout from 300ms to 3s\n          Math.floor(Math.random() * (3e3 - 300) + 300)\n        )\n      );\n    },\n    shouldRetry = isLikeCloseEvent,\n    on,\n    webSocketImpl,\n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n      return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n        const r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n      });\n    },\n    jsonMessageReplacer: replacer,\n    jsonMessageReviver: reviver\n  } = options;\n  let ws;\n  if (webSocketImpl) {\n    if (!isWebSocket(webSocketImpl)) {\n      throw new Error(\"Invalid WebSocket implementation provided\");\n    }\n    ws = webSocketImpl;\n  } else if (typeof WebSocket !== \"undefined\") {\n    ws = WebSocket;\n  } else if (typeof global !== \"undefined\") {\n    ws = global.WebSocket || // @ts-expect-error: Support more browsers\n    global.MozWebSocket;\n  } else if (typeof window !== \"undefined\") {\n    ws = window.WebSocket || // @ts-expect-error: Support more browsers\n    window.MozWebSocket;\n  }\n  if (!ws)\n    throw new Error(\n      \"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\"\n    );\n  const WebSocketImpl = ws;\n  const emitter = (() => {\n    const message = /* @__PURE__ */ (() => {\n      const listeners2 = {};\n      return {\n        on(id, listener) {\n          listeners2[id] = listener;\n          return () => {\n            delete listeners2[id];\n          };\n        },\n        emit(message2) {\n          if (\"id\" in message2) listeners2[message2.id]?.(message2);\n        }\n      };\n    })();\n    const listeners = {\n      connecting: on?.connecting ? [on.connecting] : [],\n      opened: on?.opened ? [on.opened] : [],\n      connected: on?.connected ? [on.connected] : [],\n      ping: on?.ping ? [on.ping] : [],\n      pong: on?.pong ? [on.pong] : [],\n      message: on?.message ? [message.emit, on.message] : [message.emit],\n      closed: on?.closed ? [on.closed] : [],\n      error: on?.error ? [on.error] : []\n    };\n    return {\n      onMessage: message.on,\n      on(event, listener) {\n        const l = listeners[event];\n        l.push(listener);\n        return () => {\n          l.splice(l.indexOf(listener), 1);\n        };\n      },\n      emit(event, ...args) {\n        for (const listener of [...listeners[event]]) {\n          listener(...args);\n        }\n      }\n    };\n  })();\n  function errorOrClosed(cb) {\n    const listening = [\n      // errors are fatal and more critical than close events, throw them first\n      emitter.on(\"error\", (err) => {\n        listening.forEach((unlisten) => unlisten());\n        cb(err);\n      }),\n      // closes can be graceful and not fatal, throw them second (if error didnt throw)\n      emitter.on(\"closed\", (event) => {\n        listening.forEach((unlisten) => unlisten());\n        cb(event);\n      })\n    ];\n  }\n  let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n  async function connect() {\n    clearTimeout(lazyCloseTimeout);\n    const [socket, throwOnClose] = await (connecting ?? (connecting = new Promise(\n      (connected, denied) => (async () => {\n        if (retrying) {\n          await retryWait(retries);\n          if (!locks) {\n            connecting = undefined;\n            return denied({ code: 1e3, reason: \"All Subscriptions Gone\" });\n          }\n          retries++;\n        }\n        emitter.emit(\"connecting\", retrying);\n        const socket2 = new WebSocketImpl(\n          typeof url === \"function\" ? await url() : url,\n          GRAPHQL_TRANSPORT_WS_PROTOCOL\n        );\n        let connectionAckTimeout, queuedPing;\n        function enqueuePing() {\n          if (isFinite(keepAlive) && keepAlive > 0) {\n            clearTimeout(queuedPing);\n            queuedPing = setTimeout(() => {\n              if (socket2.readyState === WebSocketImpl.OPEN) {\n                socket2.send(stringifyMessage({ type: MessageType.Ping }));\n                emitter.emit(\"ping\", false, undefined);\n              }\n            }, keepAlive);\n          }\n        }\n        errorOrClosed((errOrEvent) => {\n          connecting = undefined;\n          clearTimeout(connectionAckTimeout);\n          clearTimeout(queuedPing);\n          denied(errOrEvent);\n          if (errOrEvent instanceof TerminatedCloseEvent) {\n            socket2.close(4499, \"Terminated\");\n            socket2.onerror = null;\n            socket2.onclose = null;\n          }\n        });\n        socket2.onerror = (err) => emitter.emit(\"error\", err);\n        socket2.onclose = (event) => emitter.emit(\"closed\", event);\n        socket2.onopen = async () => {\n          try {\n            emitter.emit(\"opened\", socket2);\n            const payload = typeof connectionParams === \"function\" ? await connectionParams() : connectionParams;\n            if (socket2.readyState !== WebSocketImpl.OPEN) return;\n            socket2.send(\n              stringifyMessage(\n                payload ? {\n                  type: MessageType.ConnectionInit,\n                  payload\n                } : {\n                  type: MessageType.ConnectionInit\n                  // payload is completely absent if not provided\n                },\n                replacer\n              )\n            );\n            if (isFinite(connectionAckWaitTimeout) && connectionAckWaitTimeout > 0) {\n              connectionAckTimeout = setTimeout(() => {\n                socket2.close(\n                  CloseCode.ConnectionAcknowledgementTimeout,\n                  \"Connection acknowledgement timeout\"\n                );\n              }, connectionAckWaitTimeout);\n            }\n            enqueuePing();\n          } catch (err) {\n            emitter.emit(\"error\", err);\n            socket2.close(\n              CloseCode.InternalClientError,\n              limitCloseReason(\n                err instanceof Error ? err.message : String(err),\n                \"Internal client error\"\n              )\n            );\n          }\n        };\n        let acknowledged = false;\n        socket2.onmessage = ({ data }) => {\n          try {\n            const message = parseMessage(data, reviver);\n            emitter.emit(\"message\", message);\n            if (message.type === \"ping\" || message.type === \"pong\") {\n              emitter.emit(message.type, true, message.payload);\n              if (message.type === \"pong\") {\n                enqueuePing();\n              } else if (!disablePong) {\n                socket2.send(\n                  stringifyMessage(\n                    message.payload ? {\n                      type: MessageType.Pong,\n                      payload: message.payload\n                    } : {\n                      type: MessageType.Pong\n                      // payload is completely absent if not provided\n                    }\n                  )\n                );\n                emitter.emit(\"pong\", false, message.payload);\n              }\n              return;\n            }\n            if (acknowledged) return;\n            if (message.type !== MessageType.ConnectionAck)\n              throw new Error(\n                `First message cannot be of type ${message.type}`\n              );\n            clearTimeout(connectionAckTimeout);\n            acknowledged = true;\n            emitter.emit(\"connected\", socket2, message.payload, retrying);\n            retrying = false;\n            retries = 0;\n            connected([\n              socket2,\n              new Promise((_, reject) => errorOrClosed(reject))\n            ]);\n          } catch (err) {\n            socket2.onmessage = null;\n            emitter.emit(\"error\", err);\n            socket2.close(\n              CloseCode.BadResponse,\n              limitCloseReason(\n                err instanceof Error ? err.message : String(err),\n                \"Bad response\"\n              )\n            );\n          }\n        };\n      })()\n    )));\n    if (socket.readyState === WebSocketImpl.CLOSING) await throwOnClose;\n    let release = () => {\n    };\n    const released = new Promise((resolve) => release = resolve);\n    return [\n      socket,\n      release,\n      Promise.race([\n        // wait for\n        released.then(() => {\n          if (!locks) {\n            const complete = () => socket.close(1e3, \"Normal Closure\");\n            if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n              lazyCloseTimeout = setTimeout(() => {\n                if (socket.readyState === WebSocketImpl.OPEN) complete();\n              }, lazyCloseTimeoutMs);\n            } else {\n              complete();\n            }\n          }\n        }),\n        // or\n        throwOnClose\n      ])\n    ];\n  }\n  function shouldRetryConnectOrThrow(errOrCloseEvent) {\n    if (isLikeCloseEvent(errOrCloseEvent) && (isFatalInternalCloseCode(errOrCloseEvent.code) || [\n      CloseCode.InternalServerError,\n      CloseCode.InternalClientError,\n      CloseCode.BadRequest,\n      CloseCode.BadResponse,\n      CloseCode.Unauthorized,\n      // CloseCode.Forbidden, might grant access out after retry\n      CloseCode.SubprotocolNotAcceptable,\n      // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n      // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n      CloseCode.SubscriberAlreadyExists,\n      CloseCode.TooManyInitialisationRequests\n      // 4499, // Terminated, probably because the socket froze, we want to retry\n    ].includes(errOrCloseEvent.code)))\n      throw errOrCloseEvent;\n    if (disposed) return false;\n    if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1e3)\n      return locks > 0;\n    if (!retryAttempts || retries >= retryAttempts) throw errOrCloseEvent;\n    if (!shouldRetry(errOrCloseEvent)) throw errOrCloseEvent;\n    return retrying = true;\n  }\n  if (!lazy) {\n    (async () => {\n      locks++;\n      for (; ; ) {\n        try {\n          const [, , throwOnClose] = await connect();\n          await throwOnClose;\n        } catch (errOrCloseEvent) {\n          try {\n            if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n          } catch (errOrCloseEvent2) {\n            return onNonLazyError?.(errOrCloseEvent2);\n          }\n        }\n      }\n    })();\n  }\n  function subscribe(payload, sink) {\n    const id = generateID(payload);\n    let done = false, errored = false, releaser = () => {\n      locks--;\n      done = true;\n    };\n    (async () => {\n      locks++;\n      for (; ; ) {\n        try {\n          const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n          if (done) return release();\n          const unlisten = emitter.onMessage(id, (message) => {\n            switch (message.type) {\n              case MessageType.Next: {\n                sink.next(message.payload);\n                return;\n              }\n              case MessageType.Error: {\n                errored = true, done = true;\n                sink.error(message.payload);\n                releaser();\n                return;\n              }\n              case MessageType.Complete: {\n                done = true;\n                releaser();\n                return;\n              }\n            }\n          });\n          socket.send(\n            stringifyMessage(\n              {\n                id,\n                type: MessageType.Subscribe,\n                payload\n              },\n              replacer\n            )\n          );\n          releaser = () => {\n            if (!done && socket.readyState === WebSocketImpl.OPEN)\n              socket.send(\n                stringifyMessage(\n                  {\n                    id,\n                    type: MessageType.Complete\n                  },\n                  replacer\n                )\n              );\n            locks--;\n            done = true;\n            release();\n          };\n          await waitForReleaseOrThrowOnClose.finally(unlisten);\n          return;\n        } catch (errOrCloseEvent) {\n          if (!shouldRetryConnectOrThrow(errOrCloseEvent)) return;\n        }\n      }\n    })().then(() => {\n      if (!errored) sink.complete();\n    }).catch((err) => {\n      sink.error(err);\n    });\n    return () => {\n      if (!done) releaser();\n    };\n  }\n  return {\n    on: emitter.on,\n    subscribe,\n    iterate(request) {\n      const pending = [];\n      const deferred = {\n        done: false,\n        error: null,\n        resolve: () => {\n        }\n      };\n      const dispose = subscribe(request, {\n        next(val) {\n          pending.push(val);\n          deferred.resolve();\n        },\n        error(err) {\n          deferred.done = true;\n          deferred.error = err;\n          deferred.resolve();\n        },\n        complete() {\n          deferred.done = true;\n          deferred.resolve();\n        }\n      });\n      const iterator = async function* iterator2() {\n        for (; ; ) {\n          if (!pending.length) {\n            await new Promise((resolve) => deferred.resolve = resolve);\n          }\n          while (pending.length) {\n            yield pending.shift();\n          }\n          if (deferred.error) {\n            throw deferred.error;\n          }\n          if (deferred.done) {\n            return;\n          }\n        }\n      }();\n      iterator.throw = async (err) => {\n        if (!deferred.done) {\n          deferred.done = true;\n          deferred.error = err;\n          deferred.resolve();\n        }\n        return { done: true, value: undefined };\n      };\n      iterator.return = async () => {\n        dispose();\n        return { done: true, value: undefined };\n      };\n      return iterator;\n    },\n    async dispose() {\n      disposed = true;\n      if (connecting) {\n        const [socket] = await connecting;\n        socket.close(1e3, \"Normal Closure\");\n      }\n    },\n    terminate() {\n      if (connecting) {\n        emitter.emit(\"closed\", new TerminatedCloseEvent());\n      }\n    }\n  };\n}\nclass TerminatedCloseEvent extends Error {\n  name = \"TerminatedCloseEvent\";\n  message = \"4499: Terminated\";\n  code = 4499;\n  reason = \"Terminated\";\n  wasClean = false;\n}\nfunction isLikeCloseEvent(val) {\n  return isObject(val) && \"code\" in val && \"reason\" in val;\n}\nfunction isFatalInternalCloseCode(code) {\n  if ([\n    1e3,\n    // Normal Closure is not an erroneous close code\n    1001,\n    // Going Away\n    1006,\n    // Abnormal Closure\n    1005,\n    // No Status Received\n    1012,\n    // Service Restart\n    1013,\n    // Try Again Later\n    1014\n    // Bad Gateway\n  ].includes(code))\n    return false;\n  return code >= 1e3 && code <= 1999;\n}\nfunction isWebSocket(val) {\n  return typeof val === \"function\" && \"constructor\" in val && \"CLOSED\" in val && \"CLOSING\" in val && \"CONNECTING\" in val && \"OPEN\" in val;\n}\n\nexport { CloseCode, GRAPHQL_TRANSPORT_WS_PROTOCOL, MessageType, TerminatedCloseEvent, createClient, parseMessage, stringifyMessage };\n"],"names":["extendedTypeof","val","Array","isArray","isObject","limitCloseReason","reason","whenTooLong","length","GRAPHQL_TRANSPORT_WS_PROTOCOL","CloseCode","CloseCode2","MessageType","MessageType2","validateMessage","Error","type","payload","id","query","variables","operationName","extensions","obj","every","ob","JSON","stringify","stringifyMessage","msg","replacer","createClient","options","url","connectionParams","lazy","onNonLazyError","console","error","lazyCloseTimeout","lazyCloseTimeoutMs","keepAlive","disablePong","connectionAckWaitTimeout","retryAttempts","retryWait","async","retries2","retryDelaySeconds","Math","pow","Promise","resolve","setTimeout","floor","random","shouldRetry","isLikeCloseEvent","on","webSocketImpl","generateID","replace","c","r","toString","jsonMessageReplacer","jsonMessageReviver","reviver","ws","WebSocket","global","MozWebSocket","window","WebSocketImpl","emitter","message","listeners2","listener","emit","message2","listeners","connecting","opened","connected","ping","pong","closed","onMessage","event","l","push","splice","indexOf","args","errorOrClosed","cb","listening","err","forEach","unlisten","locks","retrying","retries","disposed","connect","clearTimeout","socket","throwOnClose","denied","undefined","code","socket2","connectionAckTimeout","queuedPing","enqueuePing","isFinite","readyState","OPEN","send","Ping","errOrEvent","TerminatedCloseEvent","close","onerror","onclose","onopen","ConnectionInit","ConnectionAcknowledgementTimeout","InternalClientError","String","acknowledged","onmessage","data","parse","parseMessage","Pong","ConnectionAck","_","reject","BadResponse","CLOSING","release","released","race","then","complete","shouldRetryConnectOrThrow","errOrCloseEvent","includes","InternalServerError","BadRequest","Unauthorized","SubprotocolNotAcceptable","SubscriberAlreadyExists","TooManyInitialisationRequests","subscribe","sink","done","errored","releaser","waitForReleaseOrThrowOnClose","Next","next","Complete","Subscribe","finally","catch","errOrCloseEvent2","iterate","request","pending","deferred","dispose","iterator","shift","throw","value","return","terminate","name","wasClean"],"sourceRoot":""}