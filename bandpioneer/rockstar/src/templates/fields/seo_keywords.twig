{% import '_includes/forms.twig' as forms %}

<style>
	.hide {
		display: none;
	}
    .related-keywords {
        margin-top: 20px;
    }
    .related-keywords p {
        margin: 0.4rem 0;
    }
    .related-keywords p i {
        opacity: 0.6;
    }
    .related-keywords p input[type="checkbox"] {
        margin-right: 0.4rem;
    }
    .related-keywords [data-id="keyword-input"] {
    	width: 100%;
    }
    @media (min-width: 576px) {
    	.related-keywords [data-id="keyword-input"] {
	    	width: 70%;
	    }
    }
</style>

<script>
	let fetchingCount = 1;
	var fetchKeywordAttempt = 0;
	var fetchRelatedAttempt = 0;

	const fetchRelatedKeywords = function()
	{
		const keyword = document.querySelector('[data-id="keyword-input"]').value;
		const createBtn = document.querySelector('[data-id="create-related-entries-btn"]');
		const keywordContainer = document.querySelector('[data-id="related-keywords"]');

		fetchRelatedAttempt++;

		keywordContainer.innerHTML = 'Fetching related keywords...<br><br>';

		let keywordInterval = setInterval(() => {
			keywordContainer.innerHTML = `Fetching related keywords ${fetchingCount++}s...<br><br>`;
		}, 1000);

		fetch(`/keywords/related?keyword=${keyword}`)
			.then(response => {
		        if(response.status === 500)
		        {
		        	if(fetchRelatedAttempt <= 3)
		        	{
		        		if(fetchRelatedKeywords < 4)
		        		{
				        	setTimeout(fetchRelatedKeywords, 1000);
				        	return '<p>Server returned 500 error (' + fetchRelatedAttempt + 'x). Fetching again...</p><br>';
				        }
				        return '<p>Server returned 500 error (' + fetchRelatedAttempt + 'x).</p><br>';
			        }
			        else
			        {
		            	return '<p>Server returned 500 error (' + fetchRelatedAttempt + 'x).</p><br>';
		            }
		        }
		        else
		        {
		        	fetchRelatedAttempt = 0;
		        }
		        return response.text();
		    })
			.then(html => {

				fetchingCount = 1;
				clearInterval(keywordInterval);

				keywordContainer.innerHTML = `<h2>Related Keywords</h2>${html}`;

				//if(document.querySelectorAll('[data-id="related-keywords"] input[type="checkbox"]').length > 0)
				if(keywordContainer.querySelectorAll('input[type="checkbox"]').length > 0)
				{
					createBtn.classList.remove('hide');
				}
				else
				{
					createBtn.classList.add('hide');
				}
		})
		.catch(error => {
			fetchingCount = 1;
			clearInterval(keywordInterval);
			keywordContainer.innerHTML = error;
			createBtn.classList.add('hide');
		});
	}

	const fetchKeywordData = function()
	{
		fetchKeywordAttempt++;

		document.querySelector('[data-id="keyword-data"]').innerHTML = 'Fetching keyword data...<br><br>';

		const keyword = document.querySelector('[data-id="keyword-input"]').value;

		fetch(`/keywords/data?keyword=${keyword}`)
			.then(response => {

		        if(response.status === 500) {
		            return '<p>Server returned 500 error (' + fetchKeywordAttempt + 'x)</p><br>'
		        }
		        else
		        {
		        	fetchKeywordAttempt = 0;
		        }
		        return response.text();
		    })
			.then(html => {

				document.querySelector('[data-id="keyword-data"]').innerHTML = html;
		})
		.catch(error => {
			document.querySelector('[data-id="keyword-data"]').innerHTML = error;
		});
	}

	const createRelatedEntries = async function()
	{
		let loadingCount = 1;

		const checkedValues = Array.from(document.querySelectorAll('[data-id="related-keywords"] input[type="checkbox"]:checked')).map(input => input.value);
		
		const catSelector = '[name="fields[categories][]"]';

		let data = { 
			"keywords": checkedValues,
			"category": document.querySelector(catSelector.replace('[fields]', '')).value
		};
		data[Craft.csrfTokenName] = Craft.csrfTokenValue;
		const jsonData = JSON.stringify(data);

		const createBtn = document.querySelector('[data-id="create-related-entries-btn"]');
		const createMsg = document.createElement('div');
		createMsg.setAttribute("data-id", "create-related-entries-loading");
		createBtn.parentNode.insertBefore(createMsg, createBtn);

		createBtn.classList.add('hide');

		let createMsgInterval = setInterval(() => {
			createMsg.innerText = `Creating related entries ${loadingCount++}s, please wait...`;
		}, 1000);

		const response = await fetch('/keywords/create-entries', {
		    method: 'POST',
		    headers: {
		        'Accept': 'application/json',
		        'Content-Type': 'application/json'
		    },
		    body: jsonData
		});

	   const jsonResponse = await response.json();

	   	clearInterval(createMsgInterval);
	   	createBtn.classList.remove('hide');

		if(jsonResponse.result == "success")
		{
		   createMsg.innerText = "Related entries created. Redirecting...";
		}
		else
		{
			createMsg.innerText = "Error creating related entries.";
			console.log(jsonResponse);
		}

	   return jsonResponse;
	}

	document.addEventListener("DOMContentLoaded", function()
    {
       	document.querySelector('[data-id="related-keywords-btn"]').addEventListener('click', function(e)
		{
			e.preventDefault();

			fetchRelatedKeywords();
		});

		document.querySelector('[data-id="keyword-data-btn"]').addEventListener('click', function(e)
		{
			e.preventDefault();

			fetchKeywordData();
		});

		document.querySelector('[data-id="create-related-entries-btn"]').addEventListener('click', function(e)
		{
			e.preventDefault();

			createRelatedEntries().then(function(response)
			{
				if(response.result == "success")
				{
					window.location.href = '/admin/utilities/queue-manager';
				}
				else
				{
					console.log('Error creating related entries');
					console.log(response);
				}
			});
		});

		// setTimeout(fetchKeywordData, 3000);
    });
</script>

<div class="related-keywords">

	<div class="field">
		<div class="heading">
			<label>
				Article Keyword
			</label>
		</div>
		<div class="instructions">
			<p>This article's primary keyword that you want to find related keywords for.</p>
		</div>
		<div class="input">
			<input type="text" data-id="keyword-input" class="text" value="{{ keyword }}">
			<a data-id="keyword-data-btn" class="btn">Get Keyword Data</a>
		</div>
	</div>

	
	<div data-id="keyword-data" class="keyword-data">
	</div>

	<div>
		<a data-id="related-keywords-btn" class="btn">Get Related Keywords</a>
		<br><br>
	</div>

	<div data-id="related-keywords" class="keyword-data">
	</div>

	<div>
		<br>
		<a data-id="create-related-entries-btn" class="btn hide">Create Entries</a>
	</div>

</div>

{# errors: field.getErrors('name'), #}