class AIDebate{static MAX_RESPONSES=50;static MAX_CACHED_RESPONSES=5;static DEBATE_QUERY_URL="/api/debate-query";static fetchResponse(e){return new Promise(((t,s)=>{const n=new XMLHttpRequest;n.open("GET",e),n.onload=function(){this.status>=200&&this.status<300?t(n.response):s({status:this.status,statusText:n.statusText})},n.onerror=function(){s({status:this.status,statusText:n.statusText})},n.send()}))}constructor(e){this.debate={active:!0,format:e},this.responseCount=0,this.responseElement=document.getElementById("responses"),this.spinner=document.getElementById("spinner"),this.scrollPane=document.getElementsByClassName("scroll-pane")[0],this.activeRebuttal="prop",this.autoScroll=!0,this.responses=[],this.initializeUX(),this.initialResponse()}initializeUX(){this.scrollDown(),document.getElementById("pause-debate").addEventListener("click",function(e){e.preventDefault(),this.pauseDebate(!this.debate.active)}.bind(this));let e=document.getElementsByClassName("scroll-pane")[0];e.onscroll=function(){e.scrollTop+e.clientHeight>=e.scrollHeight?this.autoScroll=!0:this.autoScroll=!1}.bind(this);var t=document.getElementById("response-delay"),s=document.getElementById("response-delay-value");function n(){s.innerText=parseInt(t.value)/1e3+" seconds"}t.addEventListener("input",n),n()}scrollDown(){this.autoScroll&&(this.scrollPane.scrollTop=this.scrollPane.scrollHeight)}pauseDebate(e){this.debate.active=e;var t=document.getElementById("pause-debate");this.debate.active?(t.innerText="Pause Debate",this.showSpinner(!0,"Resuming debate..."),this.nextResponse()):(t.innerText="Continue Debate",this.showSpinner(null,"Debate has been paused"))}showSpinner(e,t){"string"==typeof t&&t.length>0&&(this.spinner.getElementsByTagName("label")[0].innerText=t),null===e?this.spinner.classList.add("hide-spinner"):this.spinner.classList.remove("hide-spinner"),null===e||e?this.spinner.classList.remove("hide"):this.spinner.classList.add("hide"),setTimeout(function(){this.scrollDown()}.bind(this),0)}getResponseLength(){return document.getElementById("response-length").value}getResponseDelay(){return Number(document.getElementById("response-delay").value)}getResponseComplexity(){let e="using simple terms";switch(document.getElementById("arugument-complexity").value){case"child":e="explaining it as if I were a 5 year old child, with silly kid examples";break;case"high-school":e="explaining it on a high school level";break;case"phd":e="using academic terms on a PhD-level"}return e}getResponseTone(){let e="";switch(document.getElementById("arugument-tone").value){case"silly":e="with funny or silly comments";break;case"angry":e="with a lot of anger and taunting"}return e}getResponseComplexityAndTone(){let e=this.getResponseComplexity(),t=this.getResponseTone();return""!==t&&(e+=` and ${t}`),e}cacheResponse(e,t){this.responses.push({name:t,response:e}),this.responses.length>AIDebate.MAX_CACHED_RESPONSES&&this.responses.shift()}getCachedResponses(){return this.responses.map((e=>`${e.response}`)).join(" ... ")}getLastResponse(){return this.responses.length>0?this.responses[this.responses.length-1].response:""}get2ndToLastResponse(){return this.responses.length>1?this.responses[this.responses.length-2].response:""}initialResponse(){let e;const t=this.debate.format;e="Small Talk"==t.topic?`Your response should be ${this.getResponseLength()}. Your name is ${t[this.activeRebuttal].name} and you are making small talk with with someone to get to know them better. For this first response just say your name and ask them how they are doing.`:`You are a ${t[this.activeRebuttal].title} in a debate on ${t.topic}. The debate resolution is: ${t.resolution} Write an opening argument, in ${this.getResponseLength()}, ${this.getResponseComplexity()}, from this perspective: ${t[this.activeRebuttal].perspective}`,this.showSpinner(!0,`${t[this.activeRebuttal].name} is preparing an opening statement...`),this.responseQuery(e,function(){document.getElementById("pause-debate").classList.remove("hide"),this.nextResponse()}.bind(this))}nextResponse(){if(this.responseCount>=AIDebate.MAX_RESPONSES)this.finalResponse();else if(this.debate.active){let e=this.getResponseDelay(),t=e>5e3?2e3:0;setTimeout(function(){if(this.debate.active){let e=this.debate.format[this.activeRebuttal],t=this.debate.format["prop"===this.activeRebuttal?"opp":"prop"];this.showSpinner(!0,`${e.name} is reading ${t.name}'s response...`)}}.bind(this),t),setTimeout(function(){if(this.debate.active){let e;const t=this.debate.format;if(this.showSpinner(!0,`${this.debate.format[this.activeRebuttal].name} is responding...`),"Small Talk"==t.topic){t[this.activeRebuttal];let s=t["prop"===this.activeRebuttal?"opp":"prop"];e=`You are roll playing in a casual conversation with ${s.name}. `,""!==this.get2ndToLastResponse()&&(e+=`The last thing you said was: ${this.get2ndToLastResponse()}. Then `),e+=`${s.name} just said to you: ${this.getLastResponse()}. Using ${this.getResponseLength()} respond to that comment to continue the conversation ${this.getResponseTone()}.`}else e=`Your response should be ${this.getResponseLength()}. You are a ${t[this.activeRebuttal].title} in a debate on ${t.topic}. Your perspective ${t[this.activeRebuttal].perspective}. From that perspective, ${this.getResponseComplexityAndTone()}, respond to this argument: ${this.getLastResponse()}`;this.responseQuery(e)}}.bind(this),e-t)}}finalResponse(){const e=this.debate.format;if("Small Talk"==e.topic)query=`Your name is ${e[this.activeRebuttal].name} and you are making small talk with with someone, but your time has come to an end. Say goodbye and conclude the conversation.`;else{e[this.activeRebuttal].title,e.topic,e.resolution,this.getResponseLength(),this.getResponseComplexity(),e[this.activeRebuttal].perspective}this.showSpinner(!0,`${e[this.activeRebuttal].name} is preparing an opening statement...`),this.responseQuery(query,function(){this.debate.active=!1,this.showSpinner(null,`Debate concluded: ${AIDebate.MAX_RESPONSES} response limit reached.`),document.getElementById("pause-debate").classList.add("hide")}.bind(this))}responseQuery(e,t){if(this.debate.active&&this.responseCount<=AIDebate.MAX_RESPONSES){const s=this.debate.format;let n=`${AIDebate.DEBATE_QUERY_URL}?dt=${(new Date).getTime()}&q=${e}`;AIDebate.fetchResponse(n).then((e=>e)).then((e=>{if(this.debate.active){if(void 0!==e){this.responseCount++,this.showSpinner(!1);let t=e.replace(/&#039;/g,"").replace(/&quot;/g,"");this.cacheResponse(t,s[this.activeRebuttal].name);let n=new Date,i=`${n.getMonth()+1}/${n.getDate()}/${n.getFullYear()} ${n.getHours()%12||12}:${n.getMinutes().toString().padStart(2,"0")}${n.getHours()>=12?"pm":"am"}`;this.responseElement.innerHTML+=`<div class="ai-response ${this.activeRebuttal}"><label>${s[this.activeRebuttal].name} (${s[this.activeRebuttal].title}) at ${i}</label>${t}</div>`,this.activeRebuttal="prop"===this.activeRebuttal?"opp":"prop",setTimeout(function(){this.scrollDown()}.bind(this),0)}"function"==typeof t?t():this.nextResponse()}})).catch((e=>{console.error("Error:",e),this.nextResponse()}))}}}
